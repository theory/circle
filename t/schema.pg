SET client_min_messages TO warning;
CREATE EXTENSION IF NOT EXISTS pgtap;
RESET client_min_messages;

BEGIN;
SELECT plan( 132 );
--SELECT * FROM no_plan();

/****************************************************************************/
-- Check for basic schema objects.
SELECT tables_are(     'public', ARRAY[ 'metadata', 'hosts', 'channels', 'nicks', 'events' ] );
SELECT views_are(      'public', '{}'::NAME[] );
SELECT sequences_are(  'public', ARRAY[ 'events_id_seq' ] );
SELECT rules_are(      'public', '{}'::NAME[] );
SELECT can(  'public', ARRAY[
    'check_host',
    'check_references',
    'add_event',
    'citext',
    'texticregexeq',
    'citextin',
    'citext_le',
    'citext_smaller',
    'regexp_split_to_table',
    'regexp_split_to_array',
    'citextsend',
    'citext_gt',
    'texticregexne',
    'citext_cmp',
    'citext_ge',
    'citextout',
    'citextrecv',
    'min',
    'strpos',
    'split_part',
    'translate',
    'citext_ne',
    'texticnlike',
    'citext_larger',
    'texticlike',
    'citext_hash',
    'regexp_replace',
    'regexp_matches',
    'max',
    'citext_eq',
    'citext_lt',
    'replace'
] );


/****************************************************************************/
-- Validate metadata table.
SELECT has_pk( 'metadata' );

SELECT has_column( 'metadata', 'label' );
SELECT col_type_is( 'metadata', 'label', 'text' );
SELECT col_not_null( 'metadata', 'label' );
SELECT col_hasnt_default( 'metadata', 'label' );
SELECT col_is_pk( 'metadata', 'label' );

SELECT has_column( 'metadata', 'value' );
SELECT col_type_is( 'metadata', 'value', 'integer' );
SELECT col_not_null( 'metadata', 'value' );
SELECT col_has_default( 'metadata', 'value' );
SELECT col_default_is( 'metadata', 'value', 0 );

SELECT has_column( 'metadata', 'note' );
SELECT col_type_is( 'metadata', 'note', 'text' );
SELECT col_not_null( 'metadata', 'note' );
SELECT col_hasnt_default( 'metadata', 'note' );

-- Check that the schema is up-to-date.
SELECT is( value, 5, 'Schema should be up-to-date')
  FROM metadata WHERE label = 'schema_version';

/****************************************************************************/
-- Validate the command enum.
SELECT has_enum( 'public', 'irc_command'::name );
SELECT enum_has_labels( 'public', 'irc_command', ARRAY[
    'admin',
    'away',
    'back',
    'connect',
    'emote',
    'error',
    'info',
    'invite',
    'ison',
    'join',
    'kick',
    'kill',
    'links',
    'list',
    'mode',
    'names',
    'nick',
    'notice',
    'oper',
    'part',
    'pass',
    'ping',
    'pong',
    'privmsg',
    'quit',
    'rehash',
    'restart',
    'say',
    'server',
    'squit',
    'stats',
    'summon',
    'time',
    'topic',
    'trace',
    'user',
    'userhost',
    'users',
    'version',
    'wallops',
    'who',
    'whois',
    'whowas'
] );

/****************************************************************************/
-- Validate the event enum.
SELECT has_enum( 'public', 'irc_event'::name );
SELECT enum_has_labels( 'public', 'irc_event', ARRAY[
    'admin',
    'away',
    'back',
    'chan_mode',
    'cnotice',
    'connect',
    'disconnect',
    'error',
    'gline',
    'helpop',
    'info',
    'invite',
    'ison',
    'join',
    'kick',
    'kill',
    'links',
    'list',
    'lusers',
    'map',
    'motd',
    'names',
    'nick',
    'nooper',
    'notice',
    'nouser',
    'oper',
    'part',
    'ping',
    'private',
    'public',
    'quit',
    'rehash',
    'shutdown',
    'silence',
    'stats',
    'summon',
    'time',
    'topic',
    'unwatch',
    'user_mode',
    'userhost',
    'userip',
    'users',
    'version',
    'watch',
    'watchlist',
    'who',
    'whois',
    'whowas'
] );

/****************************************************************************/
-- Validate the hosts table.
SELECT has_table( 'hosts' );
SELECT has_pk( 'hosts' );

SELECT has_column( 'hosts', 'name' );
SELECT col_type_is( 'hosts', 'name', 'citext' );
SELECT col_not_null( 'hosts', 'name' );
SELECT col_hasnt_default( 'hosts', 'name' );
SELECT col_is_pk( 'hosts', 'name' );

/****************************************************************************/
-- Validate the channels table.
SELECT has_table( 'channels' );
SELECT has_pk( 'channels' );

SELECT has_column( 'channels', 'name' );
SELECT col_type_is( 'channels', 'name', 'citext' );
SELECT col_not_null( 'channels', 'name' );
SELECT col_hasnt_default( 'channels', 'name' );
SELECT col_is_pk( 'channels', ARRAY['name', 'host'] );

SELECT has_column( 'channels', 'host' );
SELECT col_type_is( 'channels', 'host', 'citext' );
SELECT col_not_null( 'channels', 'host' );
SELECT col_hasnt_default( 'channels', 'host' );
SELECT col_is_fk( 'channels', 'host' );
SELECT fk_ok(
    'channels', 'host',
    'hosts',  'name'
);


/****************************************************************************/
-- Validate the nicks table.
SELECT has_table( 'nicks' );
SELECT has_pk( 'nicks' );

SELECT has_column( 'nicks', 'name' );
SELECT col_type_is( 'nicks', 'name', 'citext' );
SELECT col_not_null( 'nicks', 'name' );
SELECT col_hasnt_default( 'nicks', 'name' );
SELECT col_is_pk( 'nicks', ARRAY['name', 'host'] );

SELECT has_column( 'nicks', 'host' );
SELECT col_type_is( 'nicks', 'host', 'citext' );
SELECT col_not_null( 'nicks', 'host' );
SELECT col_hasnt_default( 'nicks', 'host' );
SELECT col_is_fk( 'nicks', 'host' );
SELECT fk_ok(
    'nicks', 'host',
    'hosts',  'name'
);

/****************************************************************************/
-- Validate the events table.
SELECT has_table( 'events' );
SELECT has_pk( 'events' );

SELECT has_column( 'events', 'id' );
SELECT col_type_is( 'events', 'id', 'bigint' );
SELECT col_not_null( 'events', 'id' );
SELECT col_has_default( 'events', 'id' );
SELECT col_default_is( 'events', 'id', $$nextval('events_id_seq'::regclass)$$ );
SELECT col_is_pk( 'events', 'id' );

SELECT has_column( 'events', 'host' );
SELECT col_type_is( 'events', 'host', 'citext' );
SELECT col_not_null( 'events', 'host' );
SELECT col_hasnt_default( 'events', 'host' );
SELECT col_isnt_fk( 'events', 'host' );

SELECT has_column( 'events', 'channel' );
SELECT col_type_is( 'events', 'channel', 'citext' );
SELECT col_is_null( 'events', 'channel' );
SELECT col_hasnt_default( 'events', 'channel' );
SELECT col_is_fk( 'events', ARRAY['channel', 'host'] );
SELECT fk_ok(
    'events', ARRAY[ 'channel', 'host' ],
    'channels', ARRAY[ 'name',    'host' ]
);

SELECT has_column( 'events', 'nick' );
SELECT col_type_is( 'events', 'nick', 'citext' );
SELECT col_not_null( 'events', 'nick' );
SELECT col_hasnt_default( 'events', 'nick' );
SELECT col_is_fk( 'events', ARRAY['nick', 'host'] );
SELECT fk_ok(
    'events', ARRAY[ 'nick', 'host' ],
    'nicks', ARRAY[ 'name',    'host' ]
);

SELECT has_column( 'events', 'event' );
SELECT col_type_is( 'events', 'event', 'irc_event' );
SELECT col_not_null( 'events', 'event' );
SELECT col_has_default( 'events', 'event' );
SELECT col_default_is( 'events', 'event', 'public' );

SELECT has_column( 'events', 'target' );
SELECT col_type_is( 'events', 'target', 'citext' );
SELECT col_is_null( 'events', 'target' );
SELECT col_hasnt_default( 'events', 'target' );
SELECT col_is_fk( 'events', ARRAY['target', 'host'] );
SELECT fk_ok(
    'events', ARRAY[ 'target', 'host' ],
    'nicks',  ARRAY[ 'name',   'host' ]
);

SELECT has_column( 'events', 'body' );
SELECT col_type_is( 'events', 'body', 'text' );
SELECT col_not_null( 'events', 'body' );
SELECT col_has_default( 'events', 'body' );
SELECT col_default_is( 'events', 'body', '' );

SELECT has_column( 'events', 'tsv' );
SELECT col_type_is( 'events', 'tsv', 'tsvector' );
SELECT col_not_null( 'events', 'tsv' );
SELECT col_hasnt_default( 'events', 'tsv' );

SELECT has_column( 'events', 'seen_at' );
SELECT col_type_is( 'events', 'seen_at', 'timestamp with time zone' );
SELECT col_not_null( 'events', 'seen_at' );
SELECT col_has_default( 'events', 'seen_at' );
SELECT col_default_is( 'events', 'seen_at', 'clock_timestamp()' );

SELECT has_column( 'events', 'is_emote' );
SELECT col_type_is( 'events', 'is_emote', 'boolean' );
SELECT col_not_null( 'events', 'is_emote' );
SELECT col_has_default( 'events', 'is_emote' );
SELECT col_default_is( 'events', 'is_emote', 'false' );

SELECT has_column( 'events', 'is_spam' );
SELECT col_type_is( 'events', 'is_spam', 'boolean' );
SELECT col_not_null( 'events', 'is_spam' );
SELECT col_has_default( 'events', 'is_spam' );
SELECT col_default_is( 'events', 'is_spam', 'false' );

SELECT has_index( 'events', 'event_body_fti', 'tsv'::name );
SELECT index_is_type( 'events', 'event_body_fti', 'gin' );

SELECT has_index( 'events', 'event_seen_at_idx', 'seen_at'::name );
SELECT index_is_type( 'events', 'event_seen_at_idx', 'btree' );

SELECT has_index( 'events', 'event_host_fdx', 'host'::name );
SELECT index_is_type( 'events', 'event_host_fdx', 'btree' );

SELECT has_index( 'events', 'event_event_idx', 'event'::name );
SELECT index_is_type( 'events', 'event_event_idx', 'btree' );

SELECT has_index( 'events', 'event_nick_fdx', ARRAY['nick', 'host'] );
SELECT index_is_type( 'events', 'event_nick_fdx', 'btree' );

SELECT has_index( 'events', 'event_channel_fdx', ARRAY['channel', 'host'] );
SELECT index_is_type( 'events', 'event_channel_fdx', 'btree' );

SELECT has_index( 'events', 'event_target_fdx', ARRAY['target', 'host'] );
SELECT index_is_type( 'events', 'event_target_fdx', 'btree' );

/****************************************************************************/
-- Finish up and go home.
SELECT * FROM finish();
ROLLBACK;
